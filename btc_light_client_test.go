package main

import (
	"errors"
	"testing"

	"github.com/btcsuite/btcd/chaincfg"
	"github.com/btcsuite/btcd/wire"
	"gotest.tools/assert"
)

func TestInsertHeader(t *testing.T) {

	headers := []string{
		"0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff7f20020000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000",
		"0000002006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910fa17e6647486b23987956e55f99e813fc466ac4f02dac03e5a60d1edebd155d42257f3c67ffff7f200100000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025100ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"0000002055b6945f758f067df7585dfdd45fa1ef552658282c705ddb44c208478bf7616635931532039bdefee3c0ddecdf5e8827f1e75b462cb4e5d6b958aaec77132863267f3c67ffff7f200100000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025200ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000020a9a819e4c094039c925ca6bbf4ee25b13ce1a9515a26087403f0878d0c705866dd0fe9d50fda5b411718619b2bed66a625a30e234f9d465decf633b556d7223f267f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025300ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"000000203702ab77f7d55527f3002404261b4424be0de9a833c2051d9ba7fcd3a518cf388e6a05c319f47b1cc1f5605021ef6d96176444985debcc18b3670c3b7661233a277f3c67ffff7f200200000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025400ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"000000202ed5f90563f9f8aaae3d0fefc8b6e1821cfd7489aa41f8cbb58548c561b3996449b225d953b0e9820469c9574fa57a2425a465fb06c9c5607a3b6c640278b039277f3c67ffff7f200200000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025500ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000020a97c1747b38c81894ead2492fb1223fec796620c3e9810e612c3405beb18da572f3930cd01fd20a8e793de11afbc1e794a908f8def2030f1a4594b43aa0b6895277f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025600ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"000000207930989b9fbcb82f7d84f08e896bcd81c861eb4b53088d423ac3f6415dc31d07ec2a56c7f1ebfc48c0b6bad3bb48ed183b52b285262a409a6cd7be4a6cb62629277f3c67ffff7f200100000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025700ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"0000002072626ce522674fd44fd23ae33ad248b860f797d7b27d42ea960f99643a061650a49bf7215118afdf280ba084b435d126fb992ca69748cebee59bff5fe437ebfb287f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025800ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"000000201f19a78a418ac4399fda2fd1fe2178f92681f3d754d02a6031677fc921e79260ed3598c311fc3a047a7677293746ed7ab34703d74aa379a6fc66867813a91a3b287f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025900ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"000000208bb7c20fd287a0829562ef489b74d982c218b9cde8e317fd50d7849a1bc2c860201fe9cd762715571ef7e971005e970e76cf831b02f883adc41f646c2f36ae53287f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025a00ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000020f63aac8a2a6f5e1b5bbf5ff238a2261a4d4a5e5a5e01574c4682bdd581af8d2c044ee6c5fb8d7e7376c15355ca4fdbe98b63308cd243f4f3ad248b7bc5ad93f4287f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025b00ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"0000002017da37ea6f030caa0f1f0698cb6c75698c41d9ba9c238de6d86e1b60601c2d48078e5dbfaef2d11e0136834cf4fc5ac6b4c77264b28642c7d7e81917174fe82a287f3c67ffff7f200100000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025c00ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000020d9d919e5323a56a7c51ccfd6a3f3ddc3e6e0579cec4320931d65a5ff258bee19f171058b67826929214480ab9e463554df0cd06207cb728071bf9c6982b15a93287f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025d00ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000020b384e496f015a1b49c287148e21d598ec7a1ee19d4c93e09108bc7bc679ae03b97bb346c167ab07ba89f20de9c2dbae632d488e42aca16ffb72875a6c7a9d8f5297f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025e00ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"000000201e90e2269cf279a58c2cea61f3a07542505a6e876bbf20a3245ad8b9c2f7f342258c2ef4b10f7983c426a0b3507cb30a44b1b90fbb31e43eb5a929149365a0ad297f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025f00ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000020be9a9a68242bb989cdeb3cbe8f199767bcfae8f9e24585b2260f74fd8555ed5eb0d48a16d099fb4de39c48ab5b95c1b3e71f5b13004909a0a7608fe6a716fbd4297f3c67ffff7f200300000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff026000ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000020af7be09c2e3d5872e41f17146c0718d42161b3e18be693d2acf217dda72bc7057cce5d763eedd8aa3f3adcbd3e3202fcd320978bf82022fefb429911499d77bb297f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03011100ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"000000203c14f585e12887cf1944a230a026ccc76bdbe5bd2a6a1de2dc6bfb49d28e767e562686cae4e14e6e9b5514622cfff01651da2bbc356a3dac6af68c37bff9efdd297f3c67ffff7f200000000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03011200ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
		"000000204e2b5ee5911f7855f26a65d410bf8ce09ae22edd685380036cb07aa6b09318301be7af87da58d56ba40219290dd0d645b73998269eb980dd653244de272b523f297f3c67ffff7f200100000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03011300ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
	}
	type insertHeaderTestCase struct {
		name    string
		headers []string
		header  string
		err     error
	}

	run := func(t *testing.T, tc insertHeaderTestCase) {
		decodedHeader := make([]wire.BlockHeader, len(tc.headers))
		btcHeader, _ := BlockHeaderFromHex(tc.header)
		for id, str := range tc.headers {
			h, _ := BlockHeaderFromHex(str)
			decodedHeader[id] = h
		}
		lc := NewBTCLightClientWithData(&chaincfg.RegressionNetParams, decodedHeader, 0)

		lcErr := lc.InsertHeader(btcHeader)

		if tc.err == nil {
			assert.Assert(t, lcErr == nil)
		} else if errors.Is(lcErr, tc.err) {
			t.Fatalf("Error not match")
		}

	}

	tcs := []insertHeaderTestCase{
		{
			name:    "Success Insert",
			headers: headers,
			header:  "00000020be23b03c1776516bcca3b2bb276344f565fe1a05632358bb8e725191d21bf45d8c1525643bef283b2b0dd6bf811e805bd61775798417cbdc0ac283626794d6202a7f3c67ffff7f200100000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03011400ffffffff0200f2052a0100000016001468f54788cee5d93a5079eb7bfb32f746b7042a0d0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9012000000000000000000000000000000000000000000000000000000000000000000000000",
			err:     nil,
		},
		{
			name:    "Insert failed",
			headers: headers,
			header:  "0000002006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f91bf7fc009e51a44f6c7b063e64d80b36af5cb8bc9879b9dadc7eebec779a70b437f3c67ffff7f200100000001020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025100ffffffff0200f2052a01000000160014db62d5ead43bde6defb99c188151bf9c9d37f6c30000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000",
			err:     errors.New("fork too old"),
		},
	}

	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			run(t, tc)
		})
	}
}
func TestCleanup(t *testing.T) {
	// test-case1
	// b1 <-b2 <- b3  .... b9
	// run cleanup
	// b2 <- b3  .... b9

	// test-case2
	// b3  ... b8 <- b9 <- b10
	//                  \- c10
	// run cleanup
	// b3  ... b8 <- b9 <- b10
	//                  \- c10

	// test-case3
	// b1 <- b2 <- b3  .... b9
	//          \- c3
	//    \- d2 <- d3 <- d4
	// run cleanup
	// b2 <- b3  .... b9
	//    \- c3

}
